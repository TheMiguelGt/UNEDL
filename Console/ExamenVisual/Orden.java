/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package parcial2;

import java.awt.Dimension;
import javax.swing.JOptionPane;

/**
 *
 * @author CAT
 */
public class Orden extends javax.swing.JFrame {
    private String cadena;
    private String[] arraynum;
    private int[] arrayaco;

    /**
     * Creates new form Orden
     */
    public Orden() {
        initComponents();
        this.setMinimumSize(new Dimension(450,390));
        this.setMaximumSize(new Dimension(450,390));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTOrdenamiento = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jBBurbuja = new javax.swing.JButton();
        jBUnir = new javax.swing.JButton();
        jBMonton = new javax.swing.JButton();
        jBRapido = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jTIngresarNum = new javax.swing.JTextField();
        jBclear = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Dubai Light", 1, 24)); // NOI18N
        jLabel1.setText("Ordenamiento");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(140, 240, 160, 30);

        jTOrdenamiento.setFont(new java.awt.Font("Dubai Light", 0, 24)); // NOI18N
        jPanel1.add(jTOrdenamiento);
        jTOrdenamiento.setBounds(30, 280, 360, 30);

        jLabel2.setFont(new java.awt.Font("Dubai Light", 1, 24)); // NOI18N
        jLabel2.setText("Ingresar Numeros:");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(20, 40, 200, 30);

        jBBurbuja.setFont(new java.awt.Font("Dubai Light", 0, 18)); // NOI18N
        jBBurbuja.setText("Burbuja");
        jBBurbuja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBBurbujaActionPerformed(evt);
            }
        });
        jPanel1.add(jBBurbuja);
        jBBurbuja.setBounds(270, 200, 120, 30);

        jBUnir.setFont(new java.awt.Font("Dubai Light", 0, 18)); // NOI18N
        jBUnir.setText("Unir");
        jBUnir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBUnirActionPerformed(evt);
            }
        });
        jPanel1.add(jBUnir);
        jBUnir.setBounds(30, 130, 120, 30);

        jBMonton.setFont(new java.awt.Font("Dubai Light", 0, 18)); // NOI18N
        jBMonton.setText("Montón");
        jBMonton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBMontonActionPerformed(evt);
            }
        });
        jPanel1.add(jBMonton);
        jBMonton.setBounds(270, 130, 120, 30);

        jBRapido.setFont(new java.awt.Font("Dubai Light", 0, 18)); // NOI18N
        jBRapido.setText("Rapido");
        jBRapido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBRapidoActionPerformed(evt);
            }
        });
        jPanel1.add(jBRapido);
        jBRapido.setBounds(30, 200, 120, 30);

        jLabel3.setFont(new java.awt.Font("Dubai Light", 1, 24)); // NOI18N
        jLabel3.setText("Ordenamientos");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(140, 80, 160, 30);

        jTIngresarNum.setFont(new java.awt.Font("Dubai Light", 0, 24)); // NOI18N
        jTIngresarNum.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTIngresarNumKeyTyped(evt);
            }
        });
        jPanel1.add(jTIngresarNum);
        jTIngresarNum.setBounds(230, 40, 180, 30);

        jBclear.setFont(new java.awt.Font("Dubai Light", 0, 18)); // NOI18N
        jBclear.setText("Clear");
        jBclear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBclearActionPerformed(evt);
            }
        });
        jPanel1.add(jBclear);
        jBclear.setBounds(180, 160, 70, 30);

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/parcial2/cat-1027486_1280.jpg"))); // NOI18N
        jLabel4.setText("jLabel4");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(-270, 0, 710, 350);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static void mergesort(int[] input) {
        mergesort(input, 0, input.length - 1);
    }

    private static void mergesort(int[] input, int start, int end) {
        int mid = (start + end) / 2;
        if (start < end) {
            mergesort(input, start, mid);
            mergesort(input, mid + 1, end);
        }
        int i = 0, first = start, last = mid + 1;
        int[] tmp = new int[end - start + 1];
        while (first <= mid && last <= end) {
            tmp[i++] = input[first] < input[last] ? input[first++] : input[last++];
        }
        while (first <= mid) {
            tmp[i++] = input[first++];
        }
        while (last <= end) {
            tmp[i++] = input[last++];
        }
        i = 0;
        while (start <= end) {
            input[start++] = tmp[i++];
        }
    }
public static void quicksort(int A[], int izq, int der) {

  int pivote=A[izq]; // tomamos primer elemento como pivote
  int i=izq; // i realiza la bÃºsqueda de izquierda a derecha
  int j=der; // j realiza la bÃºsqueda de derecha a izquierda
  int aux;
 
  while(i<j){            // mientras no se crucen las bÃºsquedas
     while(A[i]<=pivote && i<j) i++; // busca elemento mayor que pivote
     while(A[j]>pivote) j--;         // busca elemento menor que pivote
     if (i<j) {                      // si no se han cruzado                      
         aux= A[i];                  // los intercambia
         A[i]=A[j];
         A[j]=aux;
     }
   }
   A[izq]=A[j]; // se coloca el pivote en su lugar de forma que tendremos
   A[j]=pivote; // los menores a su izquierda y los mayores a su derecha
   if(izq<j-1)
      quicksort(A,izq,j-1); // ordenamos subarray izquierdo
   if(j+1 <der)
      quicksort(A,j+1,der); // ordenamos subarray derecho
}

    private void jBBurbujaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBBurbujaActionPerformed
        cadena = String.valueOf(jTIngresarNum.getText());
        int inde = cadena.length();
        arraynum = new String[inde];
        arraynum = cadena.split(" ");
        arrayaco = new int[arraynum.length];
        for (int i = 0; i < arraynum.length; i++) {
            arrayaco[i] = Integer.parseInt(arraynum[i]);
        }
        int re;
        int n = arrayaco.length;
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (arrayaco[j] > arrayaco[j + 1]) {
                    // swap temp and arr[i]
                    int temp = arrayaco[j];
                    arrayaco[j] = arrayaco[j + 1];
                    arrayaco[j + 1] = temp;                  
                }
            }
        } 
        String[] aux = new String[arrayaco.length];
        String s = "";
        for (int i = 0; i < arrayaco.length; i++) {
            aux[i] = Integer.toString(arrayaco[i]);
            s = s + "" + aux[i];
        }
        jTOrdenamiento.setText(s);

    }//GEN-LAST:event_jBBurbujaActionPerformed
    
    public void sort(int arr[]) {        
        int n = arr.length;

        // Build heap (rearrange array) 
        for (int i = n / 2 - 1; i >= 0; i--) {
            heapify(arr, n, i);
        }
        // One by one extract an element from heap 
        for (int i = n - 1; i >= 0; i--) {
            // Move current root to end 
            int temp = arr[0];            
            arr[0] = arr[i];            
            arr[i] = temp;
            // call max heapify on the reduced heap 
            heapify(arr, i, 0);            
        }        
    }
    // To heapify a subtree rooted with node i which is 
    // an index in arr[]. n is size of heap 
    void heapify(int arr[], int n, int i) {        
        int largest = i;  // Initialize largest as root 
        int l = 2 * i + 1;  // left = 2*i + 1 
        int r = 2 * i + 2;  // right = 2*i + 2 
        // If left child is larger than root 
        if (l < n && arr[l] > arr[largest]) {
            largest = l;
        }
        // If right child is larger than largest so far 
        if (r < n && arr[r] > arr[largest]) {
            largest = r;
        }
        // If largest is not root 
        if (largest != i) {            
            int swap = arr[i];            
            arr[i] = arr[largest];            
            arr[largest] = swap;
            // Recursively heapify the affected sub-tree 
            heapify(arr, n, largest);            
        }        
    }    
    
    private void jBMontonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBMontonActionPerformed
          cadena = String.valueOf(jTIngresarNum.getText());
        int inde = cadena.length();
        arraynum = new String[inde];
        arraynum = cadena.split(" ");
        arrayaco = new int[arraynum.length];
        for (int i = 0; i < arraynum.length; i++) {
            arrayaco[i] = Integer.parseInt(arraynum[i]);
        }
        
        sort(arrayaco);
        
        String[] aux = new String[arrayaco.length];
        String s = "";
        for (int i = 0; i < arrayaco.length; i++) {
            aux[i] = Integer.toString(arrayaco[i]);
            s = s + "" + aux[i];
        }
        jTOrdenamiento.setText(s);
    }//GEN-LAST:event_jBMontonActionPerformed

    private void jBRapidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBRapidoActionPerformed
        cadena = String.valueOf(jTIngresarNum.getText());
        int inde = cadena.length();
        arraynum = new String[inde];
        arraynum = cadena.split(" ");
        arrayaco = new int[arraynum.length];
        for (int i = 0; i < arraynum.length; i++) {
            arrayaco[i] = Integer.parseInt(arraynum[i]);
        }        
        quicksort(arrayaco, 0, arrayaco.length-1);  
        String[] aux = new String[arrayaco.length];
        String s = "";
        for (int i = 0; i < arrayaco.length; i++) {
            aux[i] = Integer.toString(arrayaco[i]);
            s = s + "" + aux[i];
        }
        jTOrdenamiento.setText(s);
    }//GEN-LAST:event_jBRapidoActionPerformed

    private void jBUnirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBUnirActionPerformed
        int i;
        cadena = String.valueOf(jTIngresarNum.getText());
        int inde = cadena.length();
        arraynum = new String[inde];
        arraynum = cadena.split(" ");
        arrayaco = new int[arraynum.length];
        for ( i = 0; i < arraynum.length; i++) {
            arrayaco[i] = Integer.parseInt(arraynum[i]);
            System.out.println(arrayaco);
        }
        mergesort(arrayaco);
        String[] aux = new String[arrayaco.length];
        String s = "";
        for (i = 0; i < arrayaco.length; i++) {
            aux[i] = Integer.toString(arrayaco[i]);
            s = s + "" + aux[i];
        }
        jTOrdenamiento.setText(s);
        
    }//GEN-LAST:event_jBUnirActionPerformed

    private void jTIngresarNumKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTIngresarNumKeyTyped
        char c = evt.getKeyChar();
        if ((c >= 33 && c <= 47) || (c >= 58 && c <= 253)) {
            evt.consume();    
        } else {
        }
    }//GEN-LAST:event_jTIngresarNumKeyTyped

    private void jBclearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBclearActionPerformed
        jTIngresarNum.setText("");
        jTOrdenamiento.setText("");
    }//GEN-LAST:event_jBclearActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Orden.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Orden.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Orden.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Orden.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Orden orden=new Orden();
                orden.setVisible(true);
                orden.setLocationRelativeTo(null);
                
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBBurbuja;
    private javax.swing.JButton jBMonton;
    private javax.swing.JButton jBRapido;
    private javax.swing.JButton jBUnir;
    private javax.swing.JButton jBclear;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTIngresarNum;
    private javax.swing.JTextField jTOrdenamiento;
    // End of variables declaration//GEN-END:variables
}
